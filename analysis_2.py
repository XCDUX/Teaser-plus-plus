import pandas as pd
import numpy as np

# This script is used to analyse the results generated by the loop.py file
# The results presented in the last section of the report "Further experiments" are drawn from the results calculated with this script


file = 'CSV_1000_10_1e-1/CSV_'
noise_bound = 1e-2/2

# To calculate the angle between two rotation matrices (estimation of rotation error):
def getAngle(P, Q):
    R = np.dot(P, Q.T)
    cos_theta = (np.trace(R)-1)/2
    return np.arccos(cos_theta) * (180/np.pi)

relative_scale_error = np.empty(100)
relative_translation_error = np.empty(100)
angular_rotation_error = np.empty(100)
n_inliers_estimated_transformation = np.empty(100)
n_inlier_pairings_in_scale_inliers = np.empty(100)
n_inlier_in_max_clique_inliers = np.zeros(100)
n_max_clique_inlier = np.empty(100)

for i in range(100):

    source_cloud = np.transpose(pd.read_csv(file+str(i)+'/source_cloud.csv', sep=',', header=None).values)
    target_cloud = np.transpose(pd.read_csv(file+str(i)+'/target_cloud.csv', sep=',', header=None).values)[:3,1:].astype(np.float32)

    estimated_rotation = pd.read_csv(file+str(i)+'/estimated_rotation.csv',sep=',', header=None).values
    estimated_scale = (pd.read_csv(file+str(i)+'/estimated_scale.csv',sep=',', header=None).values)[0]
    estimated_translation = pd.read_csv(file+str(i)+'/estimated_translation.csv',sep=',', header=None).values

    truth_rotation = pd.read_csv(file+str(i)+'/ground_truth_rotation.csv',sep=',', header=None).values
    truth_scale = (pd.read_csv(file+str(i)+'/ground_truth_scale.csv',sep=',', header=None).values)[0]
    truth_translation = pd.read_csv(file+str(i)+'/ground_truth_translation.csv',sep=',', header=None).values

    real_inliers = np.transpose(pd.read_csv(file+str(i)+'/target_cloud.csv', sep=',', header=None).values)[3,1:].astype(np.float32)
    
    real_inliers = real_inliers*np.arange(0, real_inliers.shape[0], 1)
    real_inliers = real_inliers[real_inliers != 0]

    scale_inlier_paring = pd.read_csv(file+str(i)+'/scale_inliers_pairings.csv',sep=',', header=None).values
    
    n_real_inlier_pairing = 0
    for j in scale_inlier_paring:
        if j[0] in real_inliers and j[1] in real_inliers:
            n_real_inlier_pairing += 1

    n_inlier_pairings_in_scale_inliers[i] = n_real_inlier_pairing

    source_cloud = estimated_scale * np.matmul(estimated_rotation, source_cloud) + estimated_translation
    dist = np.sum(np.square(source_cloud-target_cloud),axis=0)

    estimated_inliers = np.argsort(dist)
    
    max_clique_inliers = (pd.read_csv(file+str(i)+'/max_clique_pairings_inliers.csv',sep=',', header=None).values)[:,1] -1
    
    n_max_clique_inlier[i] = max_clique_inliers.shape[0]
    
    for j in max_clique_inliers:
        if j in real_inliers:
            n_inlier_in_max_clique_inliers[i]+=1
    
    relative_scale_error[i] = np.abs(1 - estimated_scale/truth_scale)
    relative_translation_error[i] = np.abs(1 - np.mean(estimated_translation/truth_translation))
    angular_rotation_error[i] = 1 - getAngle(truth_rotation,estimated_rotation)/180
    n_inliers_estimated_transformation[i] = estimated_inliers[dist[estimated_inliers]<noise_bound].shape[0]
    
    #print("Real inliers:",real_inliers)
    #print("max clique inliers:", max_clique_inliers)
    #print("estimated inliers:", estimated_inliers[dist[estimated_inliers]<noise_bound])
    #print("distances:", (dist[estimated_inliers])[dist[estimated_inliers]<noise_bound])
    #print("estimated scale:", estimated_scale)
    #print("true scale", truth_scale)
    #print("estimated translation:", estimated_translation.flatten())
    #print("true translation:", truth_translation.flatten())












